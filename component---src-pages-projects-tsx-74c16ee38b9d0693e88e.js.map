{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Card/Card.js","webpack:///./src/pages/projects.tsx","webpack:///./node_modules/@material-ui/core/esm/CardContent/CardContent.js"],"names":["Card","props","ref","classes","className","_props$raised","raised","other","root","elevation","overflow","name","Wrapper","styled","paddingLeft","paddingRight","Title","Typography","fontSize","fontWeight","paddingTop","paddingBottom","GitHubProjects","edges","github","viewer","repositories","console","log","content","map","node","item","xl","lg","md","sm","xs","style","height","description","container","spacing","Projects","title","location","CardContent","_props$component","component","Component","padding"],"mappings":"8FAAA,wFAaIA,EAAoB,cAAiB,SAAcC,EAAOC,GAC5D,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAgBJ,EAAMK,OACtBA,OAA2B,IAAlBD,GAAmCA,EAC5CE,EAAQ,YAAyBN,EAAO,CAAC,UAAW,YAAa,WAErE,OAAoB,gBAAoB,IAAO,YAAS,CACtDG,UAAW,YAAKD,EAAQK,KAAMJ,GAC9BK,UAAWH,EAAS,EAAI,EACxBJ,IAAKA,GACJK,OA6BU,gBA9CK,CAElBC,KAAM,CACJE,SAAU,WA2CoB,CAChCC,KAAM,WADO,CAEZX,I,4KChDGY,EAAUC,YAAO,MAAPA,CAAc,CAC1BC,YAAa,MACbC,aAAc,QAGZC,EAAQH,YAAOI,IAAPJ,CAAmB,CAC7BK,SAAU,GACVC,WAAY,OACZC,WAAY,GACZC,cAAe,KAGbC,EAA2B,WAAM,IAKPC,EALO,OAG/BC,OACIC,OACIC,aAAgBH,MAiC5BI,QAAQC,IAAI,MAAOL,GAEnB,IAAMM,EAAUN,EAAMO,KAAI,YAAmB,IAAhBC,EAAgB,EAAhBA,KACzB,OACI,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACxC,kBAAC,IAAD,CAAMC,MAAO,CAAEC,OAAQ,MACnB,kBAAC,IAAD,KACI,4BAAKR,EAAKpB,MACV,2BAAIoB,EAAKS,mBAM7B,OACI,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAGJ,MAAO,CAAElB,WAAY,KAC7C,kBAAC,IAAD,CAAMY,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3C,kBAACrB,EAAD,gBAEHa,IAkBEc,UAbY,WACvB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,WAAWJ,YAAY,GAAGK,SAAS,cAC9C,kBAAC,IAAD,MACA,kBAACjC,EAAD,KACI,kBAACI,EAAD,iBACA,kBAACM,EAAD,U,gxECxFhB,4EAeIwB,EAA2B,cAAiB,SAAqB7C,EAAOC,GAC1E,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClB2C,EAAmB9C,EAAM+C,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDxC,EAAQ,YAAyBN,EAAO,CAAC,UAAW,YAAa,cAErE,OAAoB,gBAAoBgD,EAAW,YAAS,CAC1D7C,UAAW,YAAKD,EAAQK,KAAMJ,GAC9BF,IAAKA,GACJK,OAgCU,gBAnDK,CAElBC,KAAM,CACJ0C,QAAS,GACT,eAAgB,CACd7B,cAAe,MA8Ca,CAChCV,KAAM,kBADO,CAEZmC","file":"component---src-pages-projects-tsx-74c16ee38b9d0693e88e.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import React, { useContext } from 'react';\nimport { Layout, SEO } from 'components/common';\nimport { Header } from 'components/theme';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { Typography, Card, CardContent, Grid } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nconst Wrapper = styled('div')({\n    paddingLeft: \"15%\",\n    paddingRight: \"15%\"\n});\n\nconst Title = styled(Typography)({\n    fontSize: 30,\n    fontWeight: 'bold',\n    paddingTop: 10,\n    paddingBottom: 10\n});\n\nconst GitHubProjects: React.FC = () => {\n\n    const {\n        github: {\n            viewer: {\n                repositories: { edges },\n            },\n        },\n    } = useStaticQuery(\n        graphql`\n          {\n            github {\n              viewer {\n                repositories(first: 6, orderBy: { field: STARGAZERS, direction: DESC }) {\n                  edges {\n                    node {\n                      id\n                      name\n                      url\n                      description\n                      stargazers {\n                        totalCount\n                      }\n                      forkCount\n                      languages(first: 3) {\n                        nodes {\n                          id,\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n    );\n    console.log(\"asd\", edges)\n\n    const content = edges.map(({ node }: any) => {\n        return (\n            <Grid item xl={4} lg={4} md={4} sm={12} xs={12}>\n                <Card style={{ height: 200 }}>\n                    <CardContent>\n                        <h4>{node.name}</h4>\n                        <p>{node.description}</p>\n                    </CardContent>\n                </Card>\n            </Grid>\n        )\n    })\n    return (\n        <Grid container spacing={5} style={{ paddingTop: 30 }}>\n            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                <Title>Github</Title>\n            </Grid>\n            {content}\n        </Grid>\n    )\n}\n\nconst Projects: React.FC = () => {\n    return (\n        <Layout>\n            <SEO title=\"Projects\" description=\"\" location=\"/projects\" />\n            <Header />\n            <Wrapper>\n                <Title >Projects</Title>\n                <GitHubProjects />\n            </Wrapper>\n        </Layout>\n    )\n}\n\nexport default Projects","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);"],"sourceRoot":""}